#2023-06-02 07:45
name: Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        required: true
        default: true
#      if: ${{ inputs.build-windows }}
      build-windows:
        description: Build windows
        type: boolean
        required: true
        default: true
#      if: ${{ inputs.build-ubuntu }}
      build-ubuntu:
        description: Build ubuntu
        type: boolean
        required: true
        default: false
#      if: ${{ inputs.build-macos }}
      build-macos:
        description: Build macos
        type: boolean
        required: true
        default: false


env:
  TAG_VERSION: "xidel-v0.9.9"
  TAG_NAME:    "xidel"
  VERSION:     "0.9.9"
  TAG_BUILD:   "-b"
  TAG_REF:     "0000000"

jobs:
  build-windows:
    if: ${{ inputs.build-windows }}
    runs-on: windows-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Get ref, set build version
      shell: bash
      run: |
        _ref_all_=$(git log -1 --format='%H')
        # _ref_=$(echo ${_ref_all_::7})
        _ref_org_=${{ env.TAG_REF }}
        _ref_len_="${#_ref_org_}"
        _ref_=$(echo ${_ref_all_::$_ref_len_})
        echo "TAG_REF=$_ref_" >> $GITHUB_ENV
        _build_=${{ env.TAG_BUILD }}.$_ref_
        echo "TAG_BUILD=$_build_" >> $GITHUB_ENV

    - name: Print ref, build version
      shell: bash
      run: |
        echo "REF: ${{ env.TAG_REF }}
        echo "BLD: ${{ env.TAG_BUILD }}
        echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt

    - name: Install Lazarus
      uses: gcarreno/setup-lazarus@v3.2.15
      with:
        lazarus-version: stable

    - name: Install dependencies and setup
      continue-on-error: true    
      shell: bash    
      run: |
        set -x
        lazarus_folder=D:/a/_temp/installers/lazarus
        echo "lazarus_folder=$lazarus_folder" >> $GITHUB_ENV
        . .github/download-dependencies.sh
        . .github/setup-fpc-cfg.sh $lazarus_folder"/fpc/3.2.2/bin/x86_64-win64/fpc.cfg" "D:/a/xidel/xidel/"

#    - name: Create lazarus-installed archive
#      continue-on-error: true
#      shell: bash
#      run: |
#        staging="lazarus-installed-${{ env.VERSION }}-${{ matrix.job.target }}"
#        touch "$staging.tar.xz"
#        #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
#        #tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
#        work_dir=$(pwd)
#        cd ${{ env.lazarus_folder }}
#        tar --exclude=*.tar*  -cv . | xz -9 > "$work_dir/$staging.tar.xz"
#        cd $work_dir
#        echo "ASSET_INSTALLED=$staging.tar.xz" >> $GITHUB_ENV
#
#    - name: Publish lazarus-installed archive
#      continue-on-error: false
#      uses: deep-soft/action-gh-release@v1
#      with:
#        draft: true
#        tag_name: installed
#        files: |
#          ${{ env.ASSET_INSTALLED }}

    - run: cp ${{ env.lazarus_folder }}/fpc/3.2.2/bin/x86_64-win64/fpc.cfg.release ${{ env.lazarus_folder }}/fpc/3.2.2/bin/x86_64-win64/fpc.cfg

    - run: lazbuild --add-package internettools/internettools.lpk

    - run: bash ./manage.sh win64

#    - name: Test Xidel 64
#      run: bash ./tests/tests.sh

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.win64
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        set -x
        name="xidel.win64"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$work_dir/$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV
        cd $work_dir

    - name: Create Archive Release
      uses: deep-soft/zip-release@v1
      with:
        type: 'zip'
        filename: 'xidel.win64.zip'
        directory: '.'
        path: 'xidelpackage/'
        exclusions: '*.git* /*node_modules/* .editorconfig'
        
    - name: print env value
      shell: bash
      run: |
        echo "env.ZIP_RELEASE_ARCHIVE=${{ env.ZIP_RELEASE_ARCHIVE }}"
        cp xidel.win64.zip xidel.win64-release.zip

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}
            ${{ env.ZIP_RELEASE_ARCHIVE }}
            xidel.win64-release.zip
            # *tar.xz

    - run: find -name "*.o" -or -name "*.ppu" -delete
      shell: bash

    - run: cp ${{ env.lazarus_folder }}/fpc/3.2.2/bin/x86_64-win64/fpc.cfg.debug ${{ env.lazarus_folder }}/fpc/3.2.2/bin/x86_64-win64/fpc.cfg 

    - run: bash ./manage.sh win64

#    - name: Test Xidel 64
#      run: bash ./tests/tests.sh

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.win64
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.win64"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$work_dir/$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}
            # *tar.xz

  build-ubuntu:
    if: ${{ inputs.build-ubuntu }}
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Get ref, set build version
      shell: bash
      run: |
        _ref_all_=$(git log -1 --format='%H')
        # _ref_=$(echo ${_ref_all_::7})
        _ref_org_=${{ env.TAG_REF }}
        _ref_len_="${#_ref_org_}"
        _ref_=$(echo ${_ref_all_::$_ref_len_})
        echo "TAG_REF=$_ref_" >> $GITHUB_ENV
        _build_=${{ env.TAG_BUILD }}.$_ref_
        echo "TAG_BUILD=$_build_" >> $GITHUB_ENV

    - name: Print ref, build version
      shell: bash
      run: |
        echo "REF: ${{ env.TAG_REF }}
        echo "BLD: ${{ env.TAG_BUILD }}
        echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt

    - name: Install Lazarus
      uses: gcarreno/setup-lazarus@v3.2.15
      with:
        lazarus-version: stable

    - name: Download dependencies and setup Lazarus
      shell: bash
      run: |
       .github/download-dependencies.sh 
       .github/setup-fpc-cfg.sh 

    - name: Lazarus Build
      run: lazbuild --add-package internettools/internettools.lpk

    - run: ./manage.sh linux64

    - name: Test Xidel
      run: bash ./tests/tests.sh

    - name: 'Cross compile FreePascal'
      run: |
        sudo apt install libc6-dev-i386-cross libgcc-10-dev-i386-cross binutils-i686-linux-gnu libc6-dev-armel-cross libgcc-10-dev-armel-cross binutils-arm-linux-gnueabi libc6-dev-arm64-cross libgcc-10-dev-arm64-cross binutils-aarch64-linux-gnu
        dpkg -L libc6-dev-i386-cross libgcc-10-dev-i386-cross binutils-i686-linux-gnu libc6-dev-armel-cross libgcc-10-dev-armel-cross binutils-arm-linux-gnueabi libc6-dev-arm64-cross libgcc-10-dev-arm64-cross binutils-aarch64-linux-gnu
        cd /usr/share/fpcsrc/3.2*/
        localcompiler=/usr/bin/fpc
        sudo ln -sr $(which arm-linux-gnueabi-as) /usr/bin/arm-linux-as
        sudo ln -sr $(which arm-linux-gnueabi-ld) /usr/bin/arm-linux-ld
        sudo ln -sr $(which aarch64-linux-gnu-as) /usr/bin/aarch64-linux-as
        sudo ln -sr $(which aarch64-linux-gnu-ld) /usr/bin/aarch64-linux-ld
        sudo make crossinstall OS_TARGET=win32 CPU_TARGET=i386 PP=$localcompiler 
        sudo make crossinstall OS_TARGET=linux CPU_TARGET=i386 PP=$localcompiler 
        sudo make crossinstall OS_TARGET=linux CPU_TARGET=arm PP=$localcompiler
        sudo make crossinstall OS_TARGET=linux CPU_TARGET=aarch64 PP=$localcompiler 
        sudo ln -sr /usr/local/lib/fpc/3.2.2/ppcrossa64 /usr/bin/
        sudo ln -sr /usr/local/lib/fpc/3.2.2/ppcross386 /usr/bin/
        sudo ln -sr /usr/local/lib/fpc/3.2.2/ppcrossarm /usr/bin/

    - name: Prepare to build Xidel release version
      run: |
        cp ~/.fpc.cfg.release ~/.fpc.cfg
        find -name "*.o" -or -name "*.ppu" -delete
        ./xidel --xml xidel.lpi -e='x:replace-nodes((//Checks,//Optimizations),())' --in-place
        rm xidel

    - run: ./manage.sh linux64 && strip --strip-all xidelpackage/xidel

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.linux64
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel.linux64"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}
            xidel.linux64.deb

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.linux64.deb
        path: xidel*.deb

    - run: rm *.deb

    - name: 'Cross compile Xidel 32-Bit'
      run: ./manage.sh linux32 && strip --strip-all xidelpackage/xidel

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.linux32
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel.linux32"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}
            xidel.linux32.deb

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.linux32.deb
        path: xidel*.deb

    - run: rm *.deb

    - name: 'Cross compile Xidel ARM'
      run: ./manage.sh linuxarm && arm-linux-gnueabi-strip --strip-all xidelpackage/xidel

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.linuxarm
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel.linuxarm"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Cross compile Xidel AARCH64' 
      run: ./manage.sh linuxarm64 && aarch64-linux-gnu-strip --strip-all xidelpackage/xidel

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.linuxarm64
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel.linuxarm64"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Cross compile Xidel Win32'
      run: ./manage.sh win32 && strip --strip-all xidelpackage/xidel.exe

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.win32
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel.win32"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Cross compile Xidel Win32 OpenSSL'
      run: ./manage.sh win32openssl && strip --strip-all xidelpackage/xidel.exe

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.openssl.win32
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel.openssl.win32"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Debug version'
      run: cp ~/.fpc.cfg.debug ~/.fpc.cfg

    - run: find -name "*.o" -or -name "*.ppu" -delete

    - run: ./manage.sh linux64

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.linux64
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.linux64"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}
            xidel-debug.linux64.deb

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.linux64.deb
        path: xidel*.deb

    - run: rm *.deb

    - name: 'Cross compile Xidel 32-Bit Debug'
      run: ./manage.sh linux32

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.linux32
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.linux32"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}
            xidel-debug.linux32.deb

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.linux32.deb
        path: xidel*.deb

    - run: rm *.deb

    - name: 'Cross compile Xidel ARM Debug'
      run: ./manage.sh linuxarm

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.linuxarm
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.linuxarm"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Cross compile Xidel AARCH64 Debug' 
      run: ./manage.sh linuxarm64

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.linuxarm64
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.linuxarm64"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Cross compile Xidel Win32 Debug'
      run: ./manage.sh win32

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.win32
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.win32"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Cross compile Xidel Win32 OpenSSL Debug'
      run: ./manage.sh win32openssl

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.openssl.win32
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.openssl.win32"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

  build-macos:
    if: ${{ inputs.build-macos }}
    runs-on: macos-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Get ref, set build version
      shell: bash
      run: |
        _ref_all_=$(git log -1 --format='%H')
        # _ref_=$(echo ${_ref_all_::7})
        _ref_org_=${{ env.TAG_REF }}
        _ref_len_="${#_ref_org_}"
        _ref_=$(echo ${_ref_all_::$_ref_len_})
        echo "TAG_REF=$_ref_" >> $GITHUB_ENV
        _build_=${{ env.TAG_BUILD }}.$_ref_
        echo "TAG_BUILD=$_build_" >> $GITHUB_ENV

    - name: Print ref, build version
      shell: bash
      run: |
        echo "REF: ${{ env.TAG_REF }}
        echo "BLD: ${{ env.TAG_BUILD }}
        echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt

    - name: Install Lazarus
      uses: gcarreno/setup-lazarus@v3.2.15
      with:
        lazarus-version: stable

    - run: . .github/download-dependencies.sh && . .github/setup-fpc-cfg.sh
      shell: bash

    - run: lazbuild --add-package internettools/internettools.lpk

    - run: ./manage.sh preparebuild

    - run: cp ~/.fpc.cfg.release ~/.fpc.cfg

    - run: lazbuild xidel.lpi

    - run: ./manage.sh preparepackage

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel.mac
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel.mac"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}

    - name: 'Debug version'
      run: |
        cp ~/.fpc.cfg.debug ~/.fpc.cfg
        find . -name "*.o" -or -name "*.ppu" -delete

    - run: lazbuild xidel.lpi

    - run: ./manage.sh preparepackage

    - name: 'Upload '
      uses: actions/upload-artifact@v3
      with:
        name: xidel-debug.mac
        path: xidelpackage/*

    - name: Create release archive
      continue-on-error: true
      shell: bash
      run: |
        name="xidel-debug.mac"
        path="xidelpackage/"
        work_dir=$(pwd)
        cd $path
        staging="$work_dir/$name-${{ env.VERSION }}"
        touch "$staging.tar.xz"
        tar --exclude=*.tar*  -cv . | xz -9 > "$staging.tar.xz"
        echo "ASSET_REL=$staging.tar.xz" >> $GITHUB_ENV

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
            ${{ env.ASSET_REL }}
